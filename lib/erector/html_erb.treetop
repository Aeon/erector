grammar HtmlErb

  rule doc
    space node space x:doc? <Erector::Indenting> {
      def convert
        if x.empty?
          node.convert
        else
          node.convert + x.convert
        end
      end
    }
  end

  rule node
    hprintlet / printlet / scriptlet / self_closing_tag / closetag / opentag / text
  end

  rule scriptlet
    #todo: match non-greedily so we can have %s inside the scriptlet
    '<%' space code:[^%]* space '%>' <Erector::Indenting> {
      def convert
        text = code.text_value.strip
        if text =~ /\bdo( |.*|)?$/
          line_in text
        elsif text == "end"
          line_out text
        else
          line text
        end
      end
    }
  end

  rule printlet
    #todo: match non-greedily so we can have %s inside the scriptlet
    '<%=' space code:[^%]* space '%>' <Erector::Indenting> {
      def convert
        line "rawtext #{code.text_value.strip}"
      end
    }
  end

  rule hprintlet
    #todo: match non-greedily so we can have %s inside the scriptlet
    '<%=' space 'h' ' '+ code:[^%]* space '%>' <Erector::Indenting> {
      def convert
        line "text #{code.text_value.strip}"
      end
    }
  end

  rule tagname
    [A-Za-z0-9_]+
  end

  rule self_closing_tag
    '<' tag_name:tagname space '/>' <Erector::Indenting> {
      def convert
        line tag_name.text_value
      end
    }
  end

  rule opentag
   '<' tag_name:tagname '>' <Erector::Indenting> {
      def convert
        line_in "#{tag_name.text_value} do"
      end
    }
  end

  rule closetag
   '</' tag_name:tagname '>' <Erector::Indenting> {
      def convert
        line_out "end"
      end
    }
  end

  rule text
    [^<>]+ <Erector::Indenting> {
      def convert
        stripped = text_value.strip
        if stripped.blank?
          ""
        else
          line "text '#{text_value.strip}'"
        end
      end
    }
  end

  rule space
    ' '* {
      def convert
        ""
      end
    }
  end

end
