Erector
=======

With Erector, you define views in an object oriented fashion.

Layout Inheritance
------------------

Erector replaces the typical Rails layout mechanism with a more natural construct, the use of inheritance. Want a common layout? Just implement a layout superclass and inherit from it. Implement render in the superclass and implement template methods in its subclasses. There's one trick you'll need to use this layout for non-erector templates. Here's an example.

`application.rb` - The Erector layout superclass

    class Views::Layouts::Application < Erector::Widget
      attr_accessor :content

      def render
        html do
          head { } # head content here
          # body content here
          body do
            text content
          end
        end
      end
    end

`application.mab` - The markaby template (adjust for other appropriately templating technologies)

    widget = Views::Layouts::Application.new(self)
    widget.content = content_for_layout
    self << widget.to_s
    

Here the abstract layout widget is used in a concrete fashion by the template-based layout. Normally, the `content` method would be implemented by subclassing widgets, but the layout template sets it directly and then calls to_s on the layout widget. This allows the same layout to be shared in a backward compatible way.